name: CI/CD - Build, Push to ECR and Deploy to EC2

on:
  push:
    branches: [ "main-ec2-version" ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: 100shot-ec2-back

permissions:
  contents: read

jobs:
  build-docker-and-push-ecr:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create application.yml
        run: |
          mkdir -p ./src/main/resources
          APPLICATION_YML_PATH=./src/main/resources/application.yml
          echo "Writing application.yml"
          echo "${{ secrets.APPLICATION_YML }}" > "$APPLICATION_YML_PATH"

      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew bootJar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.EC2_ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.EC2_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-ec2:
    name: Deploy to EC2
    needs: build-docker-and-push-ecr
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: SSH into EC2 and run Docker container
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.EC2_ADDRESS }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: IMAGE=${{ needs.build-docker-and-push-ecr.outputs.image }}
          script: |
            # 8080 포트를 사용하는 프로세스 찾기 및 종료
            sudo lsof -t -i :8080 | xargs sudo kill -9 || true
            # Docker 컨테이너 실행
            docker pull $IMAGE
            docker stop my-app || true
            docker rm my-app || true
            docker run -d --name my-app -p 8080:8080 $IMAGE
